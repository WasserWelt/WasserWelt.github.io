{"meta":{"title":"WasserWelt","subtitle":"水博文的每一天","description":"水就完事了","author":"WasserWelt","url":"https://WasserWelt.github.io","root":"/"},"pages":[{"title":"","date":"2023-05-10T14:39:28.922Z","updated":"2023-05-10T14:39:28.922Z","comments":true,"path":"404.html","permalink":"https://wasserwelt.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2023-05-20T08:30:44.982Z","updated":"2023-05-20T08:30:44.982Z","comments":true,"path":"categories/index.html","permalink":"https://wasserwelt.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-05-20T07:46:27.032Z","updated":"2023-05-20T07:46:27.032Z","comments":true,"path":"index.html","permalink":"https://wasserwelt.github.io/index.html","excerpt":"","text":""},{"title":"","date":"2023-05-19T17:20:01.000Z","updated":"2023-05-19T17:20:01.000Z","comments":true,"path":"about/index.html","permalink":"https://wasserwelt.github.io/about/index.html","excerpt":"","text":"Hello World"},{"title":"","date":"2023-05-19T17:38:50.627Z","updated":"2023-05-19T17:38:50.627Z","comments":true,"path":"docs/index.html","permalink":"https://wasserwelt.github.io/docs/index.html","excerpt":"","text":""},{"title":"","date":"2023-05-17T05:11:20.890Z","updated":"2023-05-17T05:11:20.890Z","comments":true,"path":"friends/index.html","permalink":"https://wasserwelt.github.io/friends/index.html","excerpt":"","text":"Hello World"},{"title":"","date":"2023-05-20T08:31:08.523Z","updated":"2023-05-20T08:31:08.523Z","comments":true,"path":"tags/index.html","permalink":"https://wasserwelt.github.io/tags/index.html","excerpt":"","text":""},{"title":"更新日志","date":"2023-05-20T08:35:06.539Z","updated":"2023-05-20T08:35:06.539Z","comments":true,"path":"updates/index.html","permalink":"https://wasserwelt.github.io/updates/index.html","excerpt":"","text":"更新日志 2023-05-20 重磅更新！增加评论系统！修复导航栏使用img+title导致的错位修复归档页采用有封面样式的问题重新编写config，并增加很多没注意到的设置待修复各个页面的不同侧边栏待修复文章markdown渲染错误待更新首页隐藏部分文章功能 2023-05-17 更改导航栏配置，编写更新日志页修改主页至直接显示文章页面归档页仍采用默认样式（有封面）待修改更新日志页的右侧导航栏待修复导航栏的大标题位置 2023-05-15 增加网易云音乐插件修改部分网页配色 2023-05-14 修复文章页眉信息问题 2023-05-11 修复了文章公式渲染的问题，现在全面支持公式渲染了！开启主题中浏览数量、文章字数等统计插件 2023-05-10 初步配置主题完成待办事项修改主页修改个人简介增加友链、关于配置文章和博文图片链接修改配色评论功能 2023-05-08 建站开荒！"}],"posts":[{"title":"《Python 100天计划学习日志》Day1~10","slug":"Python-100-Days-1","date":"2023-05-19T16:59:57.819Z","updated":"2024-04-23T09:24:43.680Z","comments":true,"path":"2023/05/20/Python-100-Days-1/","link":"","permalink":"https://wasserwelt.github.io/2023/05/20/Python-100-Days-1/","excerpt":"这是一个学习记录，用于捡起一些Python经验，查缺补漏。项目原作者骆昊，我Fork的仓库地址：https://github.com/WasserWelt/Python-100-Days","text":"《Python 100天计划学习日志》Day1~10 这是一个学习日志，记录每次学习的主要信息和感受，捡起一些Python经验，查缺补漏。项目原作者骆昊，我Fork的仓库地址：https://github.com/WasserWelt/Python-100-Days 。 对大部分重要或遗漏知识加粗了。 大致浏览一下后，发现基础阶段的进度确实很快，难度曲线不是很平滑，所以结合了一下作者的另一个repo的内容。 学代码不能太懒蛋！要自己上手敲，敲不来也要抄。 Day1 初识Python 补充了Python解释器知识，不止有一种解释器。 Day2 语言元素 冷知识：Python有复数这种类型。PEP 8要求的Python变量命名是小写和下划线组合。 熟练切片 [:]对精简代码很重要。is和 in的意义和用法。and 和 or 的短路运算。print(f'&#123;f:.1f&#125;华氏度 = &#123;c:.1f&#125;摄氏度')变量替换占位符。 Day3 分支结构 建议不适用tab缩进，而是设置你的代码编辑工具自动将制表键变成4个空格。 Flat is better than nested.减少代码的嵌套。 123from getpass import getpass# 输入口令的时候终端中没有回显password = getpass.getpass(&#x27;请输入口令: &#x27;) 分支结构还是比较简单的，也没有讲switch。 Day4 循环结构 range(a,b)相当于[a,b)[a,b)[a,b)。range(a,b,[step])。可以利用 for~in~range()的方式节省很多资源。 差不多该做练习了，debug过程中还是有不少知识点的。 《关于找最大公约数每次都要搜一遍辗转相除法怎么做这回事》 12345for i in range(row): for _ in range(i + 1): # 这里的&#x27;_&#x27;是什么写法，头一次见 print(&#x27;*&#x27;, end=&#x27;&#x27;) print() Day5 构造程序逻辑 相对而言是比较基础的 Day6 函数和模块的使用 函数 函数的定义、返回值 Python的内置函数数学相关: abs / divmod / pow / round / min / max / sum序列相关: len / range / next / filter / map / sorted / slice / reversed类型转换: chr / ord / str / bool / int / float / complex / bin / oct / hex数据结构: dict / list / set / tuple其他函数: all / any / id / input / open / print / type 函数的参数 位置参数 可变参数 *args 关键字参数 命名关键字参数 默认值 实例代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&quot;&quot;&quot;Version: 0.1Author: 骆昊Date: 2018-03-05&quot;&quot;&quot;# 参数默认值def f1(a, b=5, c=10): return a + b * 2 + c * 3print(f1(1, 2, 3))print(f1(100, 200))print(f1(100))print(f1(c=2, b=3, a=1))# 可变参数def f2(*args): sum = 0 for num in args: sum += num return sumprint(f2(1, 2, 3))print(f2(1, 2, 3, 4, 5))print(f2())# 关键字参数def f3(**kw): if &#x27;name&#x27; in kw: print(&#x27;欢迎你%s!&#x27; % kw[&#x27;name&#x27;]) elif &#x27;tel&#x27; in kw: print(&#x27;你的联系电话是: %s!&#x27; % kw[&#x27;tel&#x27;]) else: print(&#x27;没找到你的个人信息!&#x27;)param = &#123;&#x27;name&#x27;: &#x27;骆昊&#x27;, &#x27;age&#x27;: 38&#125;f3(**param)f3(name=&#x27;骆昊&#x27;, age=38, tel=&#x27;13866778899&#x27;)f3(user=&#x27;骆昊&#x27;, age=38, tel=&#x27;13866778899&#x27;)f3(user=&#x27;骆昊&#x27;, age=38, mobile=&#x27;13866778899&#x27;) 模块 用模块管理函数（同名函数） Python常用模块运行时服务相关模块: copy / pickle / sys / …数学相关模块: decimal / math / random / …字符串处理模块: codecs / re / …文件处理相关模块: shutil / gzip / …操作系统服务相关模块: datetime / os / time / logging / io / …进程和线程相关模块: multiprocessing / threading / queue网络应用相关模块: ftplib / http / smtplib / urllib / …Web编程相关模块: cgi / webbrowser数据处理和编码模块: base64 / csv / html.parser / json / xml / … 使用 __name__管理可执行代码 变量作用域 “局部作用域”—》“嵌套作用域”—》“全局作用域”—》“内置作用域” global nonlocal关键字 闭包 12345678910111213def add(*args): total = 0 for val in args: total += val return total# __name__是Python中一个隐含的变量它代表了模块的名字# 只有被Python解释器直接执行的模块的名字才是__main__if __name__ == &#x27;__main__&#x27;: print(&#x27;call foo()&#x27;) foo() print(&#x27;call bar()&#x27;) bar() 实例代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445&quot;&quot;&quot;作用域问题Version: 0.1Author: 骆昊Date: 2018-03-05&quot;&quot;&quot;# 局部作用域def foo1(): a = 5foo1()# print(a) # NameError# 全局作用域b = 10def foo2(): print(b)foo2() # 10def foo3(): b = 100 # 局部变量 print(b)foo3() # 100print(b) # 10def foo4(): global b b = 200 # 全局变量 print(b)foo4() # 200print(b) # 200 Day7 字符串和常用数据结构 要自己写一遍程序，学习大佬写法 字符 \\+八进制or十六进制orUnicode表示字符 r'Char'不表示转译 字符串拼接、重复、成员运算、切片运算 各种方法和函数 格式化字符的三种写法 列表 定义、运算、遍历 添加移除合并 切片（完整切片以复制，反向切片以倒转） 排序 列表生成式：Python的神奇之处 yield关键字构造生成器函数 元组 元组不可修改，适合一些环境（eg多线程，一个方法返回多个值）。元组在创建时间和占用的空间上面都优于列表。 集合 创建、添加、删除、交并差、对称差 字典 创建（zip函数）、获取、遍历、修改、删除、清空 Day8 面向对象编程基础 基本概念 继承 封装 多态 私有属性和方法 Day9 面向对象进阶 @property 装饰器 目的是可以让类的属性访问比较清晰 那么实际解释的时候有什么意义，以及使用时有何帮助呢？ python 装饰器详解装饰器就是一个闭包，装饰器是闭包的一种应用。什么是装饰器呢，简言之，python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。装饰器中可以传入参数，先形成一个完整的装饰器，然后再来装饰函数，当然函数如果需要传入参数也是可以的，用不定长参数符号就可以接收，例子中传入了三个参数。python 装饰器详解 __slots__的用处 123456789class Person(object): # 限定Person对象只能绑定_name, _age和_gender属性 __slots__ = (&#x27;_name&#x27;, &#x27;_age&#x27;, &#x27;_gender&#x27;) def __init__(self, name, age): self._name = name self._age = age 静态方法 属于类但不属于对象，用 @staticmethod装饰器。 1234567891011121314151617class Triangle(object): def __init__(self, a, b, c): self._a = a self._b = b self._c = c @staticmethod def is_valid(a, b, c): return a + b &gt; c and b + c &gt; a and a + c &gt; bdef main(): a, b, c = 3, 4, 5 # 静态方法和类方法都是通过给类发消息来调用的 if Triangle.is_valid(a, b, c): t = Triangle(a, b, c) 类方法 类方法的第一个参数约定名为 cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的 元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象 1234567891011121314151617class Clock(object): &quot;&quot;&quot;数字时钟&quot;&quot;&quot; def __init__(self, hour=0, minute=0, second=0): self._hour = hour self._minute = minute self._second = second @classmethod def now(cls): ctime = localtime(time()) return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)def main(): # 通过类方法创建对象并获取系统时间 clock = Clock.now() 类之间的关系 is-a——继承或 泛化 has-a——关联 use-a——依赖 UML语言和面向对象建模 继承和多态 继承 在已有类（父类）的基础上创建新类，叫做子类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法。 里氏替换原则 用子类对象去替换掉一个父类对象 重写（override） 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本 多态（poly-morphism） 让父类的同一个行为在子类中拥有不同的实现版本，不同的子类对象会表现出不同的行为 12345678910class Pet(object, metaclass=ABCMeta): &quot;&quot;&quot;宠物&quot;&quot;&quot; def __init__(self, nickname): self._nickname = nickname @abstractmethod def make_voice(self): &quot;&quot;&quot;发出声音&quot;&quot;&quot; pass metaclass是什么？ 在上面的代码中，我们将 Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过 abc模块的 ABCMeta元类和 abstractmethod包装器来达到抽象类的效果。如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和 Cat两个子类分别对 Pet类中的 make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在 main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。 Day10 图形用户界面（GUI）和游戏开发 基于tkinter模块的GUI Python GUI模块：tkinker, wxPython,PyQt,PyGTK 使用tkinter开发GUI应用的5个基本步骤： 导入tkinter模块中我们需要的东西。 创建一个 顶层窗口对象并用它来承载整个GUI应用。 在 顶层窗口对象上添加GUI组件。 通过代码将这些GUI组件的功能组织起来。 进入主事件循环(main loop)。 使用tkinter的简单GUI 12345678910111213141516171819202122232425262728293031323334353637383940414243import tkinterimport tkinter.messageboxdef main(): flag = True # 修改标签上的文字 def change_label_text(): nonlocal flag # nonlocal关键字见Day6 flag = not flag color, msg = (&#x27;red&#x27;, &#x27;Hello, world!&#x27;)\\ if flag else (&#x27;blue&#x27;, &#x27;Goodbye, world!&#x27;) label.config(text=msg, fg=color) # 确认退出 def confirm_to_quit(): if tkinter.messagebox.askokcancel(&#x27;温馨提示&#x27;, &#x27;确定要退出吗?&#x27;): top.quit() # 创建顶层窗口 top = tkinter.Tk() # 设置窗口大小 top.geometry(&#x27;240x160&#x27;) # 设置窗口标题 top.title(&#x27;小游戏&#x27;) # 创建标签对象并添加到顶层窗口 label = tkinter.Label(top, text=&#x27;Hello, world!&#x27;, font=&#x27;Arial -32&#x27;, fg=&#x27;red&#x27;) label.pack(expand=1) # 创建一个装按钮的容器 panel = tkinter.Frame(top) # 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数 button1 = tkinter.Button(panel, text=&#x27;修改&#x27;, command=change_label_text) button1.pack(side=&#x27;left&#x27;) button2 = tkinter.Button(panel, text=&#x27;退出&#x27;, command=confirm_to_quit) button2.pack(side=&#x27;right&#x27;) panel.pack(side=&#x27;bottom&#x27;) # 开启主事件循环 tkinter.mainloop()if __name__ == &#x27;__main__&#x27;: main() GUI应用通常是事件驱动式的，之所以要进入主事件循环就是要监听鼠标、键盘等各种事件的发生并执行对应的代码对事件进行处理，因为事件会持续的发生，所以需要这样的一个循环一直运行着等待下一个事件的发生。 布局管理器，通过布局管理器可以对控件进行定位，这三种布局管理器分别是：Placer（开发者提供控件的大小和摆放位置）、Packer（自动将控件填充到合适的位置）和Grid（基于网格坐标来摆放控件） 使用Pygame进行游戏开发 移步原仓库，动手编写代码，体会逐步完善程序的过程。为了本笔记完整性，这里直接复制过来了。 Pytgame大球吃小球 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109from enum import Enum, uniquefrom math import sqrtfrom random import randintimport pygame@uniqueclass Color(Enum): &quot;&quot;&quot;颜色&quot;&quot;&quot; RED = (255, 0, 0) GREEN = (0, 255, 0) BLUE = (0, 0, 255) BLACK = (0, 0, 0) WHITE = (255, 255, 255) GRAY = (242, 242, 242) @staticmethod def random_color(): &quot;&quot;&quot;获得随机颜色&quot;&quot;&quot; r = randint(0, 255) g = randint(0, 255) b = randint(0, 255) return (r, g, b)class Ball(object): &quot;&quot;&quot;球&quot;&quot;&quot; def __init__(self, x, y, radius, sx, sy, color=Color.RED): &quot;&quot;&quot;初始化方法&quot;&quot;&quot; self.x = x self.y = y self.radius = radius self.sx = sx self.sy = sy self.color = color self.alive = True def move(self, screen): &quot;&quot;&quot;移动&quot;&quot;&quot; self.x += self.sx self.y += self.sy if self.x - self.radius &lt;= 0 or self.x + self.radius &gt;= screen.get_width(): self.sx = -self.sx if self.y - self.radius &lt;= 0 or self.y + self.radius &gt;= screen.get_height(): self.sy = -self.sy def eat(self, other): &quot;&quot;&quot;吃其他球&quot;&quot;&quot; if self.alive and other.alive and self != other: dx, dy = self.x - other.x, self.y - other.y distance = sqrt(dx ** 2 + dy ** 2) if distance &lt; self.radius + other.radius \\ and self.radius &gt; other.radius: other.alive = False self.radius = self.radius + int(other.radius * 0.146) def draw(self, screen): &quot;&quot;&quot;在窗口上绘制球&quot;&quot;&quot; pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, 0)def main(): # 定义用来装所有球的容器 balls = [] # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) print(screen.get_width()) print(screen.get_height()) # 设置当前窗口的标题 pygame.display.set_caption(&#x27;大球吃小球&#x27;) # 定义变量来表示小球在屏幕上的位置 x, y = 50, 50 running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1: x, y = event.pos radius = randint(10, 100) sx, sy = randint(-10, 10), randint(-10, 10) color = Color.random_color() ball = Ball(x, y, radius, sx, sy, color) balls.append(ball) screen.fill((255, 255, 255)) for ball in balls: if ball.alive: ball.draw(screen) else: balls.remove(ball) pygame.display.flip() # 每隔50毫秒就改变小球的位置再刷新窗口 pygame.time.delay(50) for ball in balls: ball.move(screen) for other in balls: ball.eat(other)if __name__ == &#x27;__main__&#x27;: main() Day1-10总结 学的不是很扎实，少写很多码，最近实在是太忙了，又想着要推进度。本来觉得100天很快就能学掉了，结果1-10的内容挺多的，需要多复盘。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python基础","slug":"学习笔记/Python基础","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础向","slug":"基础向","permalink":"https://wasserwelt.github.io/tags/%E5%9F%BA%E7%A1%80%E5%90%91/"},{"name":"Python","slug":"Python","permalink":"https://wasserwelt.github.io/tags/Python/"}]},{"title":"【隐藏】自定义样式测试","slug":"自定义样式测试","date":"2023-05-15T14:29:29.000Z","updated":"2024-04-23T09:24:51.531Z","comments":true,"path":"2023/05/15/自定义样式测试/","link":"","permalink":"https://wasserwelt.github.io/2023/05/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/","excerpt":"自定义样式测试","text":"H1 H2 H3 H4 H5 H6 这是段落…… 这是 行内代码 12好烦 # 这是代码块 list list 可以在配置文件中设置默认样式，为简单的一句话提供最的简便写法。 note quote 适合引用一段话 note info 默认主题色，适合中性的信息 note warning 默认黄色，适合警告性的信息 note error/danger 默认红色，适合危险性的信息 note done/success 默认绿色，适合正确操作的信息 note radiation 默认样式 note radiation yellow 可以加上颜色 note bug red 说明还存在的一些故障 note link green 可以放置一些链接 note paperclip blue 放置一些附件链接 note todo 待办事项 note guide clear 可以加上一段向导 note download 可以放置下载链接 note message gray 一段消息 note up 可以说明如何进行更新 note undo light 可以说明如何撤销或者回退 查看默认打开的折叠框 这是一个默认打开的折叠框。 控制系统分类思维导图 图片描述","categories":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/categories/%E6%96%87%E6%A1%A3/"}],"tags":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/tags/%E6%96%87%E6%A1%A3/"}]},{"title":"【隐藏】标签插件速查","slug":"标签插件速查","date":"2023-05-10T13:15:04.109Z","updated":"2024-04-23T09:23:51.158Z","comments":true,"path":"2023/05/10/标签插件速查/","link":"","permalink":"https://wasserwelt.github.io/2023/05/10/%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E9%80%9F%E6%9F%A5/","excerpt":"","text":"标签插件速查 text &#123;% args CONTENT %&#125; args: u, emp, wavy, del, kbd,psw span &#123;% span 样式参数::文本内容 %&#125; 属性 可选值 字体 logo, code 颜色 red, yellow, green, cyan, blue, gray 大小 small, h4, h3, h2, h1, large, huge, ultra 对齐方向 left, center, right p &#123;% p 样式参数::文本内容 %&#125; 属性同上，区别为p为一整段 note &#123;% note 样式参数::文本内容&#125;` | 含义 | 可选值 | | ---------------- | ------------------------------ ----------- | | 基本图标（彩色）| quote, info, warning, done/success, error/danger | | 主题图标（灰色） | radiation, bug, idea, link, paperclip, todo, message, guide, download, up, undo | | 指定颜色 | clear, light, gray, red, yellow, green, cyan, blue | ### noteblock 复杂的note嵌套 - 基本用法 123&#123;% noteblock::TITLE(optional) %&#125;CONTENT&#123;% endnoteblock %&#125; - 增加参数，参数同note 123&#123;% noteblock bug red %&#125;CONTENT&#123;% endnoteblock %&#125; ### checkbox `&#123;% checkbox 样式参数（可选）::文本（支持简单md） %&#125; 含义 可选值 颜色 red, yellow, green, cyan, blue 样式 plus, minus, times 选中状态 checked radio &#123;% radio 样式参数（可选）::文本（支持简单md） %&#125; 含义 可选值 颜色 red, yellow, green, cyan, blue 选中状态 checked timeline 123456789&#123;% timeline 时间线标题（可选） %&#125;&#123;% timenode 时间节点（标题） %&#125;正文内容&#123;% endtimenode %&#125;&#123;% endtimeline %&#125; link &#123;% link 标题::链接::图片链接（可选） %&#125; tab 12345678&#123;% tabs 页面内不重复的ID %&#125;&lt;!-- tab 栏目1 --&gt;内容&lt;!-- endtab --&gt;&lt;!-- tab 栏目2 --&gt;内容&lt;!-- endtab --&gt;&#123;% endtabs %&#125; folding 123&#123;% folding 参数（可选）::标题 %&#125;CONTENT&#123;% endfolding %&#125; 含义 可选值 颜色 red, yellow, green, cyan, blue 状态 open image &#123;% image 链接::width=宽度（可选）::height=高度（可选）::alt=描述（可选）::bg=占位颜色（可选） %&#125; 不常用标签插件 button ghcard site dropmenu inlineimage gallery audio video frame aplayer md swiper pandown 友链 网站卡片 Hexo通用","categories":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/categories/%E6%96%87%E6%A1%A3/"}],"tags":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/tags/%E6%96%87%E6%A1%A3/"}]},{"title":"【隐藏】Front-matter速查页面","slug":"Front-matter速查页面","date":"2023-05-10T12:34:19.000Z","updated":"2024-04-23T09:24:00.947Z","comments":true,"path":"2023/05/10/Front-matter速查页面/","link":"","permalink":"https://wasserwelt.github.io/2023/05/10/Front-matter%E9%80%9F%E6%9F%A5%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"Front-matter速查页面 Hexo预定义参数 字段 描述 默认值 layout 布局 config.default_layout title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章的永久链接，永久链接应该以 / 或 .html 结尾 null excerpt 纯文本的页面摘要。使用该插件 来格式化文本 disableNunjucks 启用时禁用 Nunjucks 标签 &#123;&#123; &#125;&#125;/&#123;% %&#125; 和 标签插件 的渲染功能 false lang 设置语言以覆盖自动检测 继承自 _config.yml 分类和标签 只有文章支持分类和标签，您可以在 Front-matter 中设置。分类具有顺序性和层次性；而标签没有顺序和层次。 1234567891011tags:- PS3- Gamescategories:- Diary- Life # Life会成为Diary的子分类categories:- [Diary, Life] # 这样也和上面一样categories:- [Diary]- [Life] # 这样才是两个分类 Volantis额外参数 字段 含义 值类型 默认值 layout 布局模版 String - title 页面标题 String - seo_title 网页标题 String page.title short_title 页面标题（在group列表中显示） String page.title date 创建时间 Date 文件创建时间 updated 更新日期 Date 文件修改时间 link 外部文章网址 String - music 内部音乐控件 [Object] - robots robots String - keywords 页面关键词 String - description 页面描述、摘要 String - cover 是否显示封面 Bool true top_meta 是否显示文章或页面顶部的meta信息 Bool true bottom_meta 是否显示文章或页面底部的meta信息 Bool true sidebar 页面侧边栏 Bool, Array theme.layout.*.sidebar body 页面主体元素 Array theme.layout.on_page.body thumbnail 缩略图 String false icons 图标 Array [] pin 是否置顶 Bool false headimg 文章头图 url - readmore 阅读更多按钮 Bool - Post页面特有的字段： 字段 含义 值类型 默认值 author 文章作者 [Object] config.author categories 分类 String, Array - tags 标签 String, Array - toc 是否生成目录 Bool true archive 是否归档 Bool true references 参考资料 字段：title,url Music 字段 是否必须 值类型 server 是 netease, tencent, kugou, xiami, baidu type 是 song, playlist, album, search, artist id 是 song id / playlist id / album id / search keyword Page Plugins 1234567891011---plugins: - mathjax # 渲染公式 - katex - artitalk # 说说 - bbtalk - fcircle - gitter - indent # 首行缩进 - snackbar: oldversion # 页面通知，需配置数据源---","categories":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/categories/%E6%96%87%E6%A1%A3/"}],"tags":[{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/tags/%E6%96%87%E6%A1%A3/"}]},{"title":"Hexo&Volantis配置记录","slug":"配置记录","date":"2023-05-10T12:30:03.000Z","updated":"2024-04-23T10:32:15.403Z","comments":true,"path":"2023/05/10/配置记录/","link":"","permalink":"https://wasserwelt.github.io/2023/05/10/%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","excerpt":"【不断更新中】用Hexo+Volantis搭建一个个性化的博客页面","text":"Hexo&amp;Volantis配置记录 准备 准备部分不多赘述了，互联网上很多相关内容。包括： 基本技能 Git Markdown 检索和阅读文档 配置环境 新建Repository Node.js环境 下载Hexo 下载主题 配置主题 我使用的主题是 Volantis，相对简介的同时又高度可自定义化。也曾经想过用 NexT这个非常简约黑白风的主题，不过还是选了目前这个。 一般post的 front-matter，包括这些内容 123456789101112131415161718192021title: 这是标题date: &#123;&#123; date &#125;&#125;archive: falsepin: falsetags: - tagA- tagBcategory: - 第一层级- 第二层级excerpt: 预览katex: falsecomments: truetoc: truetop: falsetypora-root-url: &#123;&#123; title &#125;&#125;references: - title: 引用说明 url: 引用链接 图片相关 设置Hexo和Typora和使文章可以简单引用图片 参考：https://zhuanlan.zhihu.com/p/265077468 对于图片资源管理，我更喜欢一个文章一个目录。在写文章的时候，更习惯于直接复制，然后通过Typora的偏好设置存到到同名文件夹里面。所以，首先要做的是修改配置文件： 12# _config.ymlpost_asset_folder: true 但是这会导致一个问题，Hexo的渲染器和一般的Markdown在这种情况下，解析图片的路径会不同。例如，使用 hexo new命令新建 my_post.md，同时创建了 root/source/_posts/my_post的存放图片的文件夹，理论上Markdown引用图片的路径要写 my_post/picture.jpg，但是Hexo接受的是 picture.jpg，这样就不能在Typora里面渲染出来了。 为了达到可渲染+直接粘贴的功能，需要修改 root/scaffolds/post.md的 front-matter，增加一行： 1typora-root-url: &#123;&#123; title &#125;&#125; 至此，我们就可以愉快地插入图片了！ 网站图标 facicon:正在绘制中……可能会有 作者头像 为了博客，特地自己画了一个，画技很烂但是为了更加独一无二一些，就牺牲了一下个人颜面吧！ 文章布局 123body: top_meta: [author, category, date, counter,wordcount] bottom_meta: [updated, tags, share,wordcount] 网页导航栏 主页 类别 分类 标签 归档 文档 更多 更新日志 友链 关于 暗黑模式 搜索框 网页侧边栏 独立界面 blogger category tagcloud music 文章界面 toc category tagcloud music 自定义右键菜单 暂无计划 评论系统——giscus https://giscus.app/zh-CN https://github.com/giscus/giscus https://www.michaeltan.org/posts/giscus/ octolytics-dimension-repository_id 自定义插件 KaTex https://blog.dearxuan.com/2023/01/07/Volantis魔改教程/ https://www.micdz.cn/article/katex-on-volantis/ 参考本文修改完成 额外功能 隐藏文章 参考：https://github.com/next-theme/hexo-generator-indexed https://github.com/volantis-x/hexo-theme-volantis/issues/727","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/"},{"name":"技术向","slug":"杂谈/技术向","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"记录","slug":"记录","permalink":"https://wasserwelt.github.io/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"自动控制原理 Ch1","slug":"自动控制原理Ch1","date":"2023-05-09T10:46:00.000Z","updated":"2023-05-21T10:26:36.857Z","comments":true,"path":"2023/05/09/自动控制原理Ch1/","link":"","permalink":"https://wasserwelt.github.io/2023/05/09/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86Ch1/","excerpt":"自动控制的一般概念……","text":"自动控制原理 Ch1 —— 自动控制的一般概念 历史 一些例子 瓦特蒸汽机速度控制 函数记录仪 锅炉液位 磁盘驱动读取系统 基本概念 系统 由一些元部件按一定要求连接并具有某一特定功能的整体。 自动控制 在没有人直接干预的情况下，通过控制装置使被控对象或过程自动按照预定的规律进行，使之具有一定的状态和性能。 反馈控制系统组成 测量元件｜反馈元件 给定元件｜输入变换元件 比较元件 放大元件｜放大变换元件 执行元件 校正元件 被控对象 输入信号｜参考输入｜给定量（包括控制信号和扰动信号） 输出信号｜被控量 扰动信号 反馈信号｜主反馈信号/局部反馈信号 误差信号（参考输入与主反馈信号之差） 这里有一些注意。本概念取自上交的书，然而从ppt上可以看到，参考输入与主反馈信号之差被称为偏差信号，而误差信号被定义为系统输出量的实际值与期望值之差，这与上交书的注释中标明的物理意义相一致，但是上交书也说了，误差信号这么定义，可以反应系统的稳定性。具体分析问题时，如有概念模糊，可以再次确定。 wyw很久以后意识到，第三章讲误差的时候重复了这个内容。 自动控制理论的内容 自动控制理论通常可分为经典控制理论、现代控制理论和智能控制理论。 经典控制理论：以传递函数为基础，研究单输入—单输出、线性定常系统的性能和设计。 现代控制理论：以状态空间法为基础，研究多输入—多输出、时变、非线性等控制系统的性能和设计。 智能控制理论：以人工智能理论为基础，研究具有模糊性、不确定性、不完全性、偶然性的系统的性能与设计。 123456789101112131415161718192021222324252627- 经典控制理论 - 线性控制理论 - 时域分析法 - 频率特性法 - 根轨迹法 - 非线性控制理论 - 相平面法 - 描述函数法 - 李雅普诺夫直接法 - 波波夫法 - 采样控制理论 - z变换法- 现代控制理论 - 状态空间分析法 - 最优控制 - 系统辨识 - 最佳估计 - 自适应控制 - 鲁棒控制 - 容错控制 - 大系统复杂系统- 智能控制系统 - 专家系统 - 模糊控制 - 学习控制 - 神经网络 - 遗传算法 自动控制系统的分类 按信号传递路径分类（控制方式） 开环控制系统：被控制量（输出量）对系统的控制量（输入量）没有影响。 开环控制系统的特点： 作用信号由输人到输出单方向传递，不对输出量进行任何检测，或虽然进行检测，但对系统工作不起控制作用。 外部条件和系统内部参数保持不变时,对于一个确定的输入量，总存在一个与之对应的输出量。 控制精度取决于控制器及被控对象的参数稳定性，容易受干扰影响，缺乏精确性和适应性。例如前面讲过的炉温控制，如果电源电压波动、电阻参数变化或周围环境温度变化，都会导致炉温偏离控制值。 闭环控制系统：也称反馈控制系统 反馈：输出量通过适当的测量装置将测量信号的全部或一部分返回输入端，使之与输入量进行比较。 反馈控制系统：基于负反馈(输人量与反馈量相减)基础 上的”检测误差，用以纠正误差”这一原理组成的系统(因为此类系统信息的传递途径有一个闭合的环路，所以也称闭环控制系统）。 闭环控制系统与开环控制系统的主要差别在于闭环控制系统有一条从系统输出端经过测量元件到输人端的反馈通路。 闭环控制系统的特点： 由负反馈构成闭环，利用误差信号进行控制。 系统元件参数配合不当，容易产生振荡，使系统不能正常工作。因而，存在稳定性问题。 当系统稳定时，对于外界扰动和系统内参数的变化等引起的误差能够自动纠正。 顺馈控制方式（很少见） 自动控制理论主要研究闭环控制系统。 按控制作用的特点分类（按给定变量的变化规律） 恒值控制系统（自动镇定系统） 克服扰动影响，使输出量以一定精度接近给定值，给定值一般不变或变化缓慢。 随动系统（自动跟踪系统） 输出量以一定精度跟随给定量的变化，要快速、准确。 程序控制系统 被控制量按照事先给定的规律或程序变化。系统工作要可靠，满足一定的控制精度要求。 按系统性能分类 线性连续控制系统 满足叠加性和齐次性（比例） 这类系统可以用线性微分方程描述，其一般形式为： a0dndtnc(t)+a1dn−1dtn−1c(t)+⋯+an−1ddtc(t)+anc(t)=b0dmdtmr(t)+b1dm−1dtm−1r(t)+⋯+bm−1ddtr(t)+bmr(t)a_0\\frac{d^n}{dt^n}c(t)+a_1\\frac{d^{n-1}}{dt^{n-1}}c(t)+\\dots+a_{n-1}\\frac{d}{dt}c(t)+a_nc(t) \\\\ =b_0\\frac{d^m}{dt^m}r(t)+b_1\\frac{d^{m-1}}{dt^{m-1}}r(t)+\\dots+b_{m-1}\\frac{d}{dt}r(t)+b_mr(t) a0​dtndn​c(t)+a1​dtn−1dn−1​c(t)+⋯+an−1​dtd​c(t)+an​c(t)=b0​dtmdm​r(t)+b1​dtm−1dm−1​r(t)+⋯+bm−1​dtd​r(t)+bm​r(t) c(t)c(t)c(t)：被控量（输出） r(t)r(t)r(t)：系统输入量 定常/时变系统：系数ai,bia_i,b_iai​,bi​是否为常数 该系统也可根据控制作用特点继续分类。 线性定常离散控制系统 离散系统是指系统的某处或多处的信号为脉冲序列或数码形式，因而信号在时间上是离散的。 上课没讲所以暂时空一下。 非线性控制系统 系统中只要有一个元部件的输入-输出特性是非线性的，这类系统就成为非线性控制系统，这时，要用非线性微分（或差分）方程描述其特性。 非线性方程的特点：系数与变量有关，或者方程中含有变量及其导数的高次幂或乘积项。例如：$$y’’(t)+y(t)y’(t)+y^2(t)=r(t)$$ 分类方式总结 按给定信号的形式 恒值系统 随动系统 按系统是否满足叠加原理 线性系统 非线性系统 按系统参数是否随时间变化 定常系统 时变系统 按信号传递的形式 连续系统 离散系统 按输入输出变量的多少 单变量系统 多变量系统 瞬间特性是否与空间分布特性相关 集总参数 分布参数 对控制系统的基本要求 稳定性 稳定性是由系统结构和参数决定的，与外界因素无关。 稳定裕量：系统参数发生某些变化时，也能够使系统保持稳定的工作状态。 快速性｜动态特性 稳定的控制系统受输入信号作用，达到稳态的过程，称为动态过程或过渡过程。 过渡时间短，过程平稳、振荡幅度小。 准确性|稳态特性 过渡过程结束后，系统的误差。 控制系统的经典测试信号 为什么要使用典型测试信号 实际系统的输入信号常具有不确定性，而且其函数形式往往不能以解析式表示。 分析和设计控制系统需要有一个对各种系统进行比较的基准。 系统对典型测试信号的响应特性与系统对实际输入信号的响应之问存在一定的关系。实际输入信号往往是一种或多种典型测试信号的组合。 典型测试信号是简单的时间的函数，便于对控制系统进行数学处理和实验分析。 选取典型测试信号主要考虑 选取输人信号的典型形式应大致反映系统的实际工作情识。 要从系统工作最不利的情况出发来选取典型测试信号。 选取的典型信号要尽可能简单。 可选作典型外作用的函数应具备以下条件： 这种函数在现场或实验室中容易实现。 控制系统在这种两数作用下的性能应代表在实际工作条件下的性能。 这种函数的数学表达式简单，便于理论计算。 目前，在控制工程设计中常用的典型外作用函数有阶跃函数、斜坡函数、脉冲函数 以及正弦函数等确定性函数，此外，还有伪随机函数。 典型测试信号 阶跃输入函数 表示参考输入量的一种瞬变。 r(t)=R0⋅u(t)={R0t≥00t&lt;0 r(t)=R_0 \\cdot u(t)= \\left\\{\\begin{matrix} R_0\\qquad t\\geq0 \\\\ 0 \\qquad t&lt;0 \\end{matrix}\\right. r(t)=R0​⋅u(t)={R0​t≥00t&lt;0​ 其中R0R_0R0​为常值，u(t)u(t)u(t)为单位阶跃函数。 延迟的单位阶跃函数： r(t)=u(t−τ)={1t≥τ0t&lt;τ r(t)=u(t-\\tau)=\\left\\{\\begin{matrix} 1\\qquad t\\geq \\tau \\\\ 0 \\qquad t&lt; \\tau \\end{matrix}\\right. r(t)=u(t−τ)={1t≥τ0t&lt;τ​ 阶跃函数占有很宽的频带。作用等价于宽频域内无数正弦信号的合成结果。 斜坡（速度）输入函数 表示一匀速信号，用于检测系统匀速运动的性能。 r(t)=R0⋅tu(t)={R0tt≥00t&lt;0 r(t)=R_0\\cdot tu(t)= \\left\\{\\begin{matrix} R_0t\\qquad t\\geq0\\\\ 0 \\qquad t&lt;0 \\end{matrix}\\right. r(t)=R0​⋅tu(t)={R0​tt≥00t&lt;0​ R0R_0R0​为常值，tu(t)tu(t)tu(t)为单位速度函数。 抛物线（加速度）输入函数 表示匀加速信号，由速度函数对ttt积分而得。 r(t)=12R0⋅t2u(t)={12R0⋅t2t≥00t&lt;0 r(t)=\\frac{1}{2}R_0\\cdot t^2u(t)= \\left\\{\\begin{matrix} \\frac12 R_0\\cdot t^2\\qquad t\\geq0\\\\0 \\qquad t&lt;0 \\end{matrix}\\right. r(t)=21​R0​⋅t2u(t)={21​R0​⋅t2t≥00t&lt;0​ 脉冲输入函数 r(t)={R0h0≤t≤h0t&lt;0,t&gt;h r(t)=\\left\\{\\begin{matrix} \\frac{R_0}{h} \\qquad 0\\leq t\\leq h \\\\ 0 \\qquad t&lt;0,t&gt;h \\end{matrix}\\right. r(t)={hR0​​0≤t≤h0t&lt;0,t&gt;h​ 脉冲宽度：hhh，一般要求h&lt;0.1T（T:系统时间常数）h&lt;0.1T（T:系统时间常数）h&lt;0.1T（T:系统时间常数），R0R_0R0​为常值。 当R0=1,h→0R_0=1,h\\rightarrow 0R0​=1,h→0时称理想单位脉冲，表达式： r(t)=δ(t)={∞t=00t≠0 r(t)=\\delta(t)=\\left\\{\\begin{matrix} \\infty \\qquad t=0\\\\ 0 \\qquad t\\neq 0 \\end{matrix}\\right. r(t)=δ(t)={∞t=00t=0​ ∫−∞0δ(t)=1\\int_{-\\infty}^{0}\\delta (t) =1 ∫−∞0​δ(t)=1 单位脉冲函数可看作单位阶跃函数的导数。 正弦函数 r(t)=R0sin⁡(ωt+ϕ)r(t)=R_0 \\sin(\\omega t+\\phi) r(t)=R0​sin(ωt+ϕ) 式中：R0R_0R0​为振幅，ϕ\\phiϕ为初相位，ω\\omegaω为震荡角频率。 正弦函数容易获得，因而十分有用，若求得系统对所有频率的正弦函数响应特性，则可准确的确定整个系统的特性。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"自动控制原理","slug":"学习笔记/自动控制原理","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"自动控制原理","slug":"自动控制原理","permalink":"https://wasserwelt.github.io/tags/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"},{"name":"专业课","slug":"专业课","permalink":"https://wasserwelt.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}]},{"title":"自动控制原理 Ch0","slug":"自动控制原理Ch0","date":"2023-05-09T10:39:20.000Z","updated":"2023-05-21T10:26:54.998Z","comments":true,"path":"2023/05/09/自动控制原理Ch0/","link":"","permalink":"https://wasserwelt.github.io/2023/05/09/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86Ch0/","excerpt":"拉普拉斯变化的意义……","text":"自动控制原理 Ch0 —— 数学基础：拉普拉斯变换 拉普拉斯变化的意义 控制中需要解齐次线性常微分方程，都是对t（时间）求导。进行拉普拉斯变换后，会变成一个分式，再用留数法拆分，最后进行逆拉普拉斯变换。（仅瞎扯，看后面） 基本函数的Laplace变换 原函数 表达式 拉普拉斯变化后 变体 单位阶跃 f(t)=1(t)f(t)=1(t)f(t)=1(t) F(s)=1sF(s)=\\frac{1}{s}F(s)=s1​ 时延/叠加 单位斜坡 f(t)=t⋅1(t)f(t)=t\\cdot1(t)f(t)=t⋅1(t) F(s)=1s2F(s)=\\frac{1}{s^2}F(s)=s21​ / 单位加速度 f(t)=12t2f(t)=\\frac{1}{2}t^2f(t)=21​t2 F(s)=1s2F(s)=\\frac{1}{s^2}F(s)=s21​ / 幂函数 f(t)=tnf(t)=t^nf(t)=tn F(s)=n!sn+1F(s)=\\frac{n!}{s^{n+1}}F(s)=sn+1n!​ 通用 e的指数 拉普拉斯变换的基本法则 【TODO】","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"自动控制原理","slug":"学习笔记/自动控制原理","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"自动控制原理","slug":"自动控制原理","permalink":"https://wasserwelt.github.io/tags/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"},{"name":"专业课","slug":"专业课","permalink":"https://wasserwelt.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}]},{"title":"欢迎新老朋友","slug":"欢迎新老朋友","date":"2023-05-09T10:26:16.000Z","updated":"2023-05-10T15:04:22.446Z","comments":true,"path":"2023/05/09/欢迎新老朋友/","link":"","permalink":"https://wasserwelt.github.io/2023/05/09/%E6%AC%A2%E8%BF%8E%E6%96%B0%E8%80%81%E6%9C%8B%E5%8F%8B/","excerpt":"没错，我又回来了！换上了hexo和好看的主题，用着顺手的Markdown语法，白嫖github-pages，一切都是新的！","text":"欢迎新老朋友 本站尚在开荒中…… 前言 没错，我又回来了！换上了hexo和好看的主题，用着顺手的Markdown语法，白嫖github-pages，一切都是新的！ 每一次想要捯饬博客都是在自己最忙的时候，和自己想象中的悠悠闲闲写博客的感觉完全不同。没办法，忙碌等于有收获，有收获就想要产出。 2.0的博客，我想要写什么？ 1.0时期，既不会Linux，也没有前后端基础知识，网络也是一点也不懂，灌水文章倒是发了不少（（所以，2.0的博客，主要是保持积累，静候产出。 2023，我想要做什么？ 随着知识的积累，我越来越清晰地认识到自己技术的匮乏，认知的浅薄。所以，最主要的上传一些笔记。一些适合用Markdown写的课程笔记，我会直接写完后上传，不适合的可能会以图片形式上传。另外是一些项目的开发日记，不过大概率是犯蠢日记。 结语 总之，挂靠在Github上的博客没那么容易寄了！物理转移也很方便，强大的Hexo很贴近我的写作习惯。灌水是少不了的！摸鱼是一定要摸的！","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/"},{"name":"日常向","slug":"杂谈/日常向","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/%E6%97%A5%E5%B8%B8%E5%90%91/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://wasserwelt.github.io/tags/%E6%9D%82%E8%B0%88/"}],"author":"me"}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python基础","slug":"学习笔记/Python基础","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%9F%BA%E7%A1%80/"},{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/categories/%E6%96%87%E6%A1%A3/"},{"name":"杂谈","slug":"杂谈","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/"},{"name":"技术向","slug":"杂谈/技术向","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"自动控制原理","slug":"学习笔记/自动控制原理","permalink":"https://wasserwelt.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"},{"name":"日常向","slug":"杂谈/日常向","permalink":"https://wasserwelt.github.io/categories/%E6%9D%82%E8%B0%88/%E6%97%A5%E5%B8%B8%E5%90%91/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://wasserwelt.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础向","slug":"基础向","permalink":"https://wasserwelt.github.io/tags/%E5%9F%BA%E7%A1%80%E5%90%91/"},{"name":"Python","slug":"Python","permalink":"https://wasserwelt.github.io/tags/Python/"},{"name":"文档","slug":"文档","permalink":"https://wasserwelt.github.io/tags/%E6%96%87%E6%A1%A3/"},{"name":"记录","slug":"记录","permalink":"https://wasserwelt.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"自动控制原理","slug":"自动控制原理","permalink":"https://wasserwelt.github.io/tags/%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/"},{"name":"专业课","slug":"专业课","permalink":"https://wasserwelt.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"杂谈","slug":"杂谈","permalink":"https://wasserwelt.github.io/tags/%E6%9D%82%E8%B0%88/"}]}